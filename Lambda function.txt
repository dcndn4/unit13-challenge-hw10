def validate_data(age, investment_amount, intent_request):
    """
    Validates the data provided by the user.
    """

    # Validate the retirement age based on the user's current age.
    # An retirement age of 65 years is considered by default.
    if age is not None:
        age = parse_int(
            age
        )  # Since parameters are strings it's important to cast values
        if age < 0:
            return build_validation_result(
                False,
                "age",
                "Your age is invalid, can you provide an age greater than zero?",
            )
        elif age >= 65:
            return build_validation_result(
                False,
                "age",
                "The maximum age to contract this service is 64, "
                "can you provide an age between 0 and 64 please?",
            )

    # Validate the investment amount, it should be >= 5000
    if investment_amount is not None:
        investment_amount = parse_int(investment_amount)
        if investment_amount < 5000:
            return build_validation_result(
                False,
                "investmentAmount",
                "The minimum investment amount is $5,000 USD, "
                "could you please provide a greater amount?",
            )

    return build_validation_result(True, None, None)





10:15 PM
There is a second def for getting investment recommendations.
def get_investment_recommendation(risk_level):
    """
    Returns an initial investment recommendation based on the risk profile.
    """
    risk_levels = {
        "none": "100% bonds (AGG), 0% equities (SPY)",
        "very low": "80% bonds (AGG), 20% equities (SPY)",
        "low": "60% bonds (AGG), 40% equities (SPY)",
        "medium": "40% bonds (AGG), 60% equities (SPY)",
        "high": "20% bonds (AGG), 80% equities (SPY)",
        "very high": "0% bonds (AGG), 100% equities (SPY)",
    }

    return risk_levels[risk_level.lower()]